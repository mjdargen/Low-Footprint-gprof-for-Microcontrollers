/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : DMA1.h
**     Project     : MCUX_PE_KL25Z_FRTOS_ShieldwFatFS_gprof
**     Processor   : MKL25Z128VLK4
**     Component   : DMAController
**     Version     : Component 01.039, Driver 01.02, CPU db: 3.00.000
**     Repository  : Kinetis
**     Compiler    : GNU C Compiler
**     Date/Time   : 2020-01-10, 10:49, # CodeGen: 0
**     Abstract    :
**          This embedded component implements initialization
**          and runtime handling of an on-chip DMA controller.
**     Settings    :
**          Component name                                 : DMA1
**          OnError                                        : no
**          OnComplete                                     : yes
**          RWTransactionSizeGtThenOne                     : yes
**          RWTransactionSize                              : 2
**          RWTransactionUnitSameInAllComponent            : yes
**          HasCycleStealMode                              : no
**          HasHalfCompleteInterrupt                       : no
**          Device                                         : DMA
**          Channel arbitration type                       : Fixed
**            Autoset channel priority                     : 
**          Statically allocated channels                  : 1
**            Channel settings                             : Chan: 0
**              Channel                                    : DMA_Channel0
**              Allocate channel                           : yes
**              Channel shared                             : yes
**              Used by component(s)                       : DacLdd1_DMA0
**              Arbitration type                           : Fixed
**                Priority                                 : 0
**              Interrupt service                          : Enabled
**                Transfer complete interrupt              : 
**                  Interrupt vector                       : INT_DMA0
**                  Interrupt priority                     : 2
**              Component name0                            : DacLdd1_DMA0
**          Dynamically allocatable channels               : 0
**     Contents    :
**         Init          - LDD_TDeviceData* DMA1_Init(void);
**         InitChannel   - LDD_TDeviceData* DMA1_InitChannel(LDD_TDeviceData *DeviceDataPtr,...
**         EnableRequest - LDD_TError DMA1_EnableRequest(DMA1_TChanDeviceData *ChanDeviceDataPtr);
**
**     Copyright : 1997 - 2015 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file DMA1.h
** @version 01.02
** @brief
**          This embedded component implements initialization
**          and runtime handling of an on-chip DMA controller.
*/         
/*!
**  @addtogroup DMA1_module DMA1 module documentation
**  @{
*/         

#ifndef __DMA1_H
#define __DMA1_H

/* MODULE DMA1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "Cpu.h"
#include "PE_LDD.h"

/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define DMA1_PRPH_BASE_ADDRESS  0x40008000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define DMA1_Init_METHOD_ENABLED       /*!< Init method of the component DMA1 is enabled (generated) */
#define DMA1_InitChannel_METHOD_ENABLED /*!< InitChannel method of the component DMA1 is enabled (generated) */
#define DMA1_EnableRequest_METHOD_ENABLED /*!< EnableRequest method of the component DMA1 is enabled (generated) */

/* Static channel constants. This constants are used to initialize DMA1_TChnInit.ChnNum variable */
#define DMA1_STATIC_CHANNEL_0                               0U

/* Dynamic channel constants. This constants are used to initialize DMA1_TChnInit.ChnNum variable */
/* Transfer control descriptor prototype */
typedef struct DMA1_TTCD_stuct {
  uint32_t                         DMA_SAR_Reg;            /* DMA_SAR register */
  uint32_t                         DMA_DAR_Reg;            /* DMA_DAR register */
  uint32_t                         DMA_DSR_BCR_Reg;        /* DMA_DSR_register */
  uint32_t                         DMA_DCR_Reg;            /* DMA_DCR register */
} volatile DMA1_TTCD, *DMA1_TTCDPtr;

/*! Event prototype */
typedef void (DMA1_TEventFn)(LDD_TDeviceData *DevDataPtr);

/* Events setting structure prototype */
typedef struct DMA1_Events_stuct {
  DMA1_TEventFn                   *OnCompleteFnPtr;        /* OnComplete function pointer */
} DMA1_TEvents, *DMA1_TEventsPtr;

/* Channel initialization structure prototype */
typedef struct DMA1_TChnInit_stuct {
  uint32_t                         ChnNum;                 /* Logical channel number (set to '-1' for autoselect) */
  DMA1_TTCD                        TCD;                    /* Channel registers initialization values */
  uint8_t                          MUX_CHCFG_Reg;          /* DMAMUX_CHCFG reg. init. value */
  DMA1_TEvents                     Events;                 /* Events initialization values */
} DMA1_TChnInit, *DMA1_TChnInitPtr;

/* Channel device data structure prototype */
typedef void DMA1_TChanDeviceData;

/*
** ===================================================================
**     Method      :  DMA1_Init (component DMAController)
*/
/*!
**     @brief
**         Initializes the associated peripheral(s) and the component
**         internal variables. The method is called automatically as a
**         part of the application initialization code.
**     @return
**                         - Pointer to the device data structure. 
*/
/* ===================================================================*/
LDD_TDeviceData* DMA1_Init(void);

/*
** ===================================================================
**     Method      :  DMA1_InitChannel (component DMAController)
*/
/*!
**     @brief
**         The method allocates DMA channel for the DMA transfer
**         defined by the transfer descriptor input parameter
**         DescriptorPtr. This method must be called before DMA channel
**         is initialized. Otherwise ERR_NOTAVAIL error code is
**         returned after call of DMA_LDD channel methods.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         ChIntPtr        - Pointer to a DMA transfer
**                           descriptor structure.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any possible
**                           channel with desired features to be
**                           allocated.
*/
/* ===================================================================*/
LDD_TDeviceData* DMA1_InitChannel(LDD_TDeviceData *DeviceDataPtr, DMA1_TChnInit *ChIntPtr, LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  DMA1_EnableRequest (component DMAController)
*/
/*!
**     @brief
**         The method enables DMA request from peripheral. Please note
**         that this method doesn't start the transfer. The transfer is
**         started as soon as DMA request from peripheral is asserted.
**     @param
**         ChanDeviceDataPtr - DMA channel
**                           data structure pointer returned by
**                           [InitChannel()] method.
**     @return
**                         - Error code, possible codes: 
**                           - ERR_OK - OK. 
**                           - ERR_DISABLED - Component is disabled.
*/
/* ===================================================================*/
LDD_TError DMA1_EnableRequest(DMA1_TChanDeviceData *ChanDeviceDataPtr);

/*
** ===================================================================
**     Method      :  DMA1_TransferComplete_ISR (component DMAController)
**
**     Description :
**         Transfer complete ISR
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {FreeRTOS RTOS Adapter} ISR function prototype */
PE_ISR(DMA1_INT_DMA0_TransferComplete_ISR);
/* END DMA1. */

#endif
/* ifndef __DMA1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
