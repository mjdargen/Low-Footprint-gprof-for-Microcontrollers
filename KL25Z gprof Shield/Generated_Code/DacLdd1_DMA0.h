/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : DacLdd1_DMA0.h
**     Project     : MCUX_PE_KL25Z_FRTOS_ShieldwFatFS_gprof
**     Processor   : MKL25Z128VLK4
**     Component   : DMAChannel_LDD
**     Version     : Component 01.053, Driver 01.01, CPU db: 3.00.000
**     Repository  : Kinetis
**     Compiler    : GNU C Compiler
**     Date/Time   : 2020-01-10, 10:49, # CodeGen: 0
**     Abstract    :
**          This embedded component implements
**          a DMA transfer channel descriptor definition.
**     Settings    :
**          Component name                                 : DacLdd1_DMA0
**          Hardware request                               : Enabled
**            Request source                               : DAC0_DMA_Request
**            Request periodic trigger                     : Disabled
**          Channel select                                 : Fixed
**            DMA controller device                        : DMA1
**            Channel                                      : DMA_Channel0
**            Allocate channel                             : no
**            Arbitration type                             : Fixed
**              Priority                                   : 0
**            Interrupt service                            : Enabled
**              Transfer complete interrupt                : 
**                Interrupt vector                         : INT_DMA0
**                Interrupt priority                       : 2
**          External object declaration                    : (string list)
**          Source transaction settings                    : 
**            Start address                                : 
**            Transaction size                             : 16-bits
**            Address adjustment                           : 2
**            Address modulo                               : Buffer disabled
**          Destination transaction settings               : 
**            Start address                                : 
**            Transaction size                             : 16-bits
**            Address adjustment                           : 0
**            Address modulo                               : Buffer disabled
**          Transfer settings                              : 
**            Auto-align mode                              : Disabled
**            Asynchronous requests                        : Disabled
**            Transaction size                             : 16-bits
**            Transactions count                           : 2
**            Request count                                : 1
**            After request complete actions               : 
**              Channel linking                            : Disabled
**              Address adjustment                         : Disabled
**            After transfer complete actions              : 
**              Disable peripheral request                 : no
**              Channel linking                            : Disabled
**              Address adjustment                         : Disabled
**              Scatter/gather                             : Disabled
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**            Half complete                                : Disabled
**            Event mask                                   : 
**              OnComplete                                 : Enabled
**              OnError                                    : Disabled
**     Contents    :
**         Init          - LDD_TDeviceData* DacLdd1_DMA0_Init(LDD_TUserData *UserDataPtr);
**         EnableRequest - LDD_TError DacLdd1_DMA0_EnableRequest(LDD_TDeviceData *DeviceDataPtr);
**
**     Copyright : 1997 - 2015 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file DacLdd1_DMA0.h
** @version 01.01
** @brief
**          This embedded component implements
**          a DMA transfer channel descriptor definition.
*/         
/*!
**  @addtogroup DacLdd1_DMA0_module DacLdd1_DMA0 module documentation
**  @{
*/         

#ifndef __DacLdd1_DMA0_H
#define __DacLdd1_DMA0_H

/* MODULE DacLdd1_DMA0. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "DMA1.h"
#include "PE_LDD.h"
#include "DMA_PDD.h"

#include "Cpu.h"

/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define DacLdd1_DMA0_PRPH_BASE_ADDRESS  0x40008000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define DacLdd1_DMA0_Init_METHOD_ENABLED /*!< Init method of the component DacLdd1_DMA0 is enabled (generated) */
#define DacLdd1_DMA0_EnableRequest_METHOD_ENABLED /*!< EnableRequest method of the component DacLdd1_DMA0 is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */
#define DacLdd1_DMA0_OnComplete_EVENT_ENABLED /*!< OnComplete event of the component DacLdd1_DMA0 is enabled (generated) */

/* Source circular buffer base address mask. Represents required 0-modulo-size mask of base source address when using circular buffer. */
#define DacLdd1_DMA0_SOURCE_CIRCULAR_BUFFER_ADDRESS_MASK 0U
/* Destination circular buffer base address mask. Represents required 0-modulo-size mask of base destination address when using circular buffer. */
#define DacLdd1_DMA0_DESTINATION_CIRCULAR_BUFFER_ADDRESS_MASK 0U

/*
** ===================================================================
**     Method      :  DacLdd1_DMA0_Init (component DMAChannel_LDD)
*/
/*!
**     @brief
**         Initializes the DMAChannel_LDD component. This method
**         allocates no memory. Memory for all DMA used channles is
**         allocated by DMAController componet .
**         This method can be called only once. Before the second call
**         of Init() the Deinit() must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* DacLdd1_DMA0_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  DacLdd1_DMA0_EnableRequest (component DMAChannel_LDD)
*/
/*!
**     @brief
**         The method enables request from peripheral. Please note that
**         this method doesn't start the transfer. The transfer is
**         started as soon as DMA request from peripheral is asserted.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Error code, possible codes: 
**                           - ERR_OK - OK. 
**                           - ERR_DISABLED - Component is disabled.
*/
/* ===================================================================*/
LDD_TError DacLdd1_DMA0_EnableRequest(LDD_TDeviceData *DeviceDataPtr);

/* END DacLdd1_DMA0. */
#endif
/* ifndef __DacLdd1_DMA0_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
